# ===============================================
# DUNGEON CRAWL STONE SOUP WEBTILES CONFIGURATION
# ===============================================

# Base Configuration
# ==================

# Server name, so far only used in the ttyrec metadata
server_id = ""

# Optional script to initialize a user, e.g. make sure the
# paths and the rc file exist. This is not done by the
# server at the moment.
init_player_program = "./util/webtiles-init-player.sh"

password_db = "./webserver/passwd.db3"
# crypt() algorithm, e.g. "1" for MD5 or "6" for SHA-512; see crypt(3). If
# false, use traditional DES (but then only the first eight characters of the
# password are significant).
crypt_algorithm = "6"
# The length of the salt string to use. If crypt_algorithm is false, this
# setting is ignored and the salt is two characters.
crypt_salt_length = 16

nick_regex = "^[a-zA-Z0-9]{3,20}$"
max_passwd_length = 20

login_token_lifetime = 7

static_path = "./webserver/static"
template_path = "./webserver/templates/"
# Path for server-side unix sockets (to be used to communicate with crawl)
# By default, the system temp dir is used
# server_socket_path = ""

max_idle_time = 18000
connection_timeout = 600
kill_timeout = 10

max_connections = 100

recording_term_size = [80, 24]

# Watch socket dirs for games not started by the server
watch_socket_dirs = false

# Optional: status file containing information about the currently running games
#dgl_status_file = "./rcs/status"
#status_file_update_rate = 5

# Enable /dgl-status. This is used by the DCSS website to collect global player
# information
expose_dgl_status = true

# If you're using expose_dgl_status and also serve console games using
# dgamelaunch, set the path to dgamelaunch to show those games in /dgl-status
# too.
# dgamelaunch_path = "/usr/local/bin/dgamelaunch"

milestone_files = ["./milestones"]
list_savegames = false

# scoring config
max_score_list_length = 1000


# Set to a URL with %s where lowercased player name should go in order to
# hyperlink WebTiles spectator names to their player pages.
# Leave out to disable player page hyperlinks
# player_url = "http://crawl.akrasiac.org/scoring/players/%s.html"

# Set to a list of users who administrate the server. The admin title will be
# indicated by color/description on the WebTiles lobby and spectator list.
# server_admins = []

# Set to a list of users who can use the web ui administration panel.
# server_admins are implicitly included in this group. You can implicitly
# include devs by setting devs_are_server_janitors to true.
# server_janitors = []

# Set to true to allow devs to use web ui admin commands. Note: this is a
# pretty big security hole! Anyone could register a dev nick, and they're
# publicly known. If this is enabled, dev_nicks_can_be_registered must be false.
# Default: false
# devs_are_server_janitors = true

# Set to true to allow registration of developer nicks. These are the nicks
# specified in devteam_crawl_accounts.txt.
# Default: false
# dev_nicks_can_be_registered = false

# A text file containing user accounts of the DCSS Development Team. The
# devteam title is indicated by color/description on the WebTiles lobby and
# spectator list. This file should come as part of the repository.
# devteam_file = "./webserver/devteam_crawl_accounts.txt"

# URL to the public Sequell nick database. This is only used by the
# get_titles.py script.
# nickdb_url = "https://loom.shalott.org/nickmap.txt"

# A text file containing maps of the achievment titles to users accounts. This
# file is parsed from nick_url by get_titles.py.
# player_title_file = "./webserver/player_titles.txt"

# A list of possible titles in the player title file. These are treated as
# mutually exclusive, so they are assumed to be in an order where later titles
# override the earlier ones.
# title_names = ["goodplayers", "greatplayers", "greaterplayers", "centuryplayers"]

# Locale for e.g. number formatting, may not need this if we move formatting to
# client.
# locale = "en_US.UTF-8"

# Detach from session after startup?
daemon = false

# pidfile = "server.pid"

# Set these options to drop privileges for security
# uid =
# gid =
# umask =
# chroot =

no_cache = false
game_data_no_cache = true
use_minified = true
use_cdn = true

games_conf_d = "webserver/games.conf.d/"

# Non-SSL bindings
[[binds]]
port = 8080
address = ""

# SSL
# [ssl_options]
# certfile = "./webserver/localhost.crt"
# keyfile = "./webserver/localhost.key"

# [[ssl_binds]]
# port = 8081
# address = "localhost"


# Game Configuration
# ==================

# You can specify [[games]] sections here or in *.toml files in the
# games_conf_d directory

[[games]]
id = "dcss-web-trunk"
name = "DCSS trunk"
version = "trunk"
mode = "Dungeon Crawl"
comment = "Start a standard game of Crawl."
crawl_binary = "./crawl"
#options = ["-extra-options", "-go-here"]
inprogress_path = "./rcs/running"
rcfile_path = "./rcs/"
socket_path = "./rcs"
morgue_path = "./rcs/%n"
# full or relative url to morgues, where %n is replaced with the username
# morgue_url = "/morgues/%n/"
# path to score file
score_path = "./saves/scores"
client_path = "./webserver/game_data/"
macro_path = "./rcs/"
ttyrec_path = "./rcs/ttyrecs/%n"
# dir_path = "./"
# env_lang = "en_US.UTF8"
send_json_options = true

[[games]]
id = "sprint-web-trunk"
name = "Sprint trunk"
version = "trunk"
mode = "Dungeon Sprint"
comment = "Start one of several single-map challenge mode games of Crawl."
crawl_binary = "./crawl"
options = ["-sprint"]
inprogress_path = "./rcs/running"
rcfile_path = "./rcs/"
socket_path = "./rcs"
morgue_path = "./rcs/%n"
# morgue_url = "/morgues/%n/"
# path to score file, with %m being replaced by a map name if map_path is
# defined.
score_path = "./saves/scores-sprint-%m"
# Path to toml file giving all sprint map names/descriptions in sorted
# order. This is generated by game_map.py, which is run automatically when
# building WebTiles.
map_path = "./dat/des/sprint/sprint.toml"
client_path = "./webserver/game_data/"
macro_path = "./rcs/"
ttyrec_path = "./rcs/ttyrecs/%n"
send_json_options = true

[[games]]
id = "zd-web-trunk"
name = "Zot Defence trunk"
version = "trunk"
mode = "Zot Defence"
comment = "Start one of several \"tower defence\"-style games of Crawl."
crawl_binary = "./crawl"
options = ["-zotdef"]
inprogress_path = "./rcs/running"
rcfile_path = "./rcs/"
socket_path = "./rcs"
morgue_path = "./rcs/%n"
# morgue_url = "/morgues/%n/"
score_path = "./saves/scores-zotdef"
client_path = "./webserver/game_data/"
macro_path = "./rcs/"
ttyrec_path = "./rcs/ttyrecs/%n"
send_json_options = true

[[games]]
id = "tut-web-trunk"
name = "Tutorial trunk"
version = "trunk"
mode = "Tutorial"
comment = "Start one of several specialised tutorials to learn how to play."
crawl_binary = "./crawl"
options = ["-tutorial"]
inprogress_path = "./rcs/running"
rcfile_path = "./rcs/"
socket_path = "./rcs"
morgue_path = "./rcs/%n"
client_path = "./webserver/game_data/"
macro_path = "./rcs/"
ttyrec_path = "./rcs/ttyrecs/%n"
send_json_options = true

[game_link_settings]
hide_versions = []


# Logging Configuration
# =====================

[logging_config]
# When filename is not defined, stdout is used.
# filename = "webtiles.log"
# Limits for the logger when writing to a file
# max_bytes = 10000000
# backup_count = 5

format = "%(asctime)s %(levelname)s: %(message)s"
# 10, 20, 30, 40 = DEBUG, INFO, WARNING, ERROR
level = 20
# Enable logging of requests & websocket connect/disconnect events
enable_access_log = true

# Janitor Commands
# ================

# In this section, you can define janitor_commands that are available to
# server janitors (server owners and possibly others, see server_janitors
# config option above).
#
# Each command has the following parameters:
# * id: Unique URL
# * name: human-readable description, should be short
# * action: should be either command or source:
#   * command: run the specified command, and return stdout, stderr to the
#              client. Note: the command path must be absolute, $PATH is not
#              used.
#   * source:  return (as application/octet-stream) the specified local file.
# * argument: the command string to execute or local file to serve, depending
#             on the value of action. You can insert Python format variables
#             into this string. These are substituted with values from GET
#             request query args, so shouldn't be sensitive info like
#             passwords, etc.  NOTE: User-supplied values must match the
#             following regex: ^[a-zA-Z0-9_-]+$
#
# Enabling janitor commands requires a server restart, but adding additional
# commands can be done with a reload.

#[[janitor_commands]]
#id = "rebuild"
#name = "Rebuild a DCSS version"
#action = "command"
#argument = "/bin/echo 'I am the command that rebuilds dcss {version}!'"

#[[janitor_commands]]
#id = "save"
#name = "Download a save"
#action = "source"
#argument = "/path/to/dcss/{version}/{nick}.cs"
