#line 2 "levcomp.lex.cc"

#line 4 "levcomp.lex.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1201] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,   85,   82,   83,
       84,   78,   85,   85,   76,   79,   85,   80,   77,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   82,   34,   36,   85,   85,   85,
       85,   85,   85,   85,   86,    6,   86,   86,    4,    2,
        3,   86,    2,    2,    2,    2,    9,   10,   86,    9,
        9,   86,   12,   86,   32,   82,   33,   84,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,

       32,   32,   82,   32,   32,   32,   32,   32,   32,   32,
       32,   32,   85,   28,   23,   28,   78,   85,   85,   27,
       79,   85,   80,   77,   85,   85,   85,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,   85,
       28,   34,   36,   85,   85,   85,   85,   85,   85,   85,
       15,   16,   84,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       85,   13,   15,   13,   13,   13,   13,   13,   13,   86,
       21,   22,   86,   20,   86,   82,   83,    0,   81,    0,
       80,   80,   80,   80,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       82,   34,   36,    0,    0,    0,    0,    0,   34,    0,
        0,    0,    0,    0,    0,    0,    0,   39,    6,    5,
        0,    0,    2,    3,    2,    0,    2,    2,    2,    2,
        9,    9,   10,    9,    9,    9,    0,   11,    0,   12,
       31,    0,   31,   82,   33,    0,    0,   33,   31,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,    0,   30,   31,   82,   31,   34,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   26,    0,
       26,   28,   23,   28,    0,   23,   26,    0,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   25,    0,   26,   28,   26,   34,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   15,   16,    0,
        0,    0,   16,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,    0,   14,   13,   15,   13,   13,   13,   13,   13,
       13,   13,   13,   19,    0,   19,   21,   22,    0,    0,
        0,    0,   18,    0,   80,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    2,    9,    9,    9,    7,    0,    0,   29,
        0,    0,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   34,   31,   31,   31,   31,   31,   31,
       31,    0,   24,    0,    0,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   34,   34,   26,   26,
       26,   26,   26,   26,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,    0,   17,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   35,    0,    0,
        0,    0,    0,    0,    2,    9,    8,    0,    9,    7,
        0,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,    0,   31,    0,   31,   31,   31,   31,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        0,   26,    0,   26,   26,   26,   26,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,    0,    0,    0,    0,   45,    0,    0,   65,
        0,    0,    0,    0,    0,    0,    0,    0,   64,   43,
        0,    0,    0,    0,    0,    0,    0,    0,   52,   62,
        0,    0,    0,    0,   38,    0,    0,    0,    0,    2,

       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,    0,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    0,   26,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,    0,   68,    0,   46,    0,   60,   70,   71,
       73,   72,   74,    0,    0,    0,    0,    0,   69,    0,
       48,   61,    0,   53,    0,    0,    0,    0,    0,    0,
        0,   41,    1,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       50,   55,    0,    0,    0,    0,    0,   66,   54,   47,
        0,    0,   51,    0,    0,    0,    0,    0,    1,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   63,    0,    0,
        0,    0,   67,    0,   49,    0,    0,    0,    0,    0,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,

        0,   31,   31,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,    0,   26,   26,   13,   13,   13,   13,
       13,   13,   13,   13,    0,    0,   57,    0,   75,    0,
        0,    0,   37,    0,    0,   31,   31,   31,   31,   31,
       31,    0,   31,   31,    0,   31,   26,   26,   26,   26,
       26,   26,    0,   26,   26,    0,   26,   13,   13,   13,
       13,   56,    0,   59,    0,   42,   40,   31,   31,   31,
       31,   31,   31,   26,   26,   26,   26,   26,   26,   13,
       13,   58,    0,   31,   31,   26,   26,   13,    0,   31,
       26,   13,    0,   31,   26,   13,   44,   31,   26,    0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    1,    6,    1,    7,    1,    1,    8,
        9,    1,   10,   11,   12,   13,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        1,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       25,   32,   33,   34,   35,   36,   37,   25,   25,   25,
        1,   38,    1,    1,   25,    1,   39,   25,   25,   40,

       41,   42,   43,   44,   45,   25,   25,   46,   25,   25,
       47,   48,   25,   49,   50,   51,   52,   53,   25,   25,
       25,   25,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[56] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    6,    6,    6,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    1,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1221] =
    {   0,
        0,   54,   58,   68,   62,   64,   54,   72,  119,  173,
      227,  281,  335,  389,   75,  178, 3546, 4082,   79, 4082,
     3542, 4082, 3532,   76, 4082,   78, 3525,   80, 4082,   76,
     3507,   62, 3488,  163,   66,   67,  160, 3474, 3477, 3464,
      162,   85, 3476, 3445,  442,    0, 4082,  170, 3427, 3419,
     3404,  149,  151, 3395, 4082, 4082, 3445,  199, 4082,    0,
     4082, 3444,  203,    0, 3414,  175, 3382, 4082, 3433,   55,
     3371,  112, 4082, 3421,  286,  290, 4082,  295,  394,  398,
      407,  411,  420,  424,  451,  464,  470,  474,  480,  502,
      511,  520,  515,  546,  525,  542,  562,  566,  570,  583,

      588,  593,  607,  611,  615,  620,  625,  633,  637,  642,
      650,  655,  403,  662, 4082,  674,  449,  685,  496, 4082,
      693,  667,  697,  521,  699,  712,  711,  713,  731,  722,
      723,  761,  736,  762,  768,  770,  774,  776,  780,  786,
      817,  799,  576,  823,  811,  824,  828,  829,  830,  836,
      840, 4082,  878,  196,  198, 3395,  288,  200,  289,  183,
      439,  293,  291,  297,  271,  292,  380,  498,  627,  202,
      882,  276,  889,  779,  272,  379,  397,  515,  643,  858,
      895, 4082,  899, 4082,  903,  475, 4082, 3398, 4082, 3388,
      405, 3387, 3381,  478, 3373, 3360, 3347,  428, 3353, 3348,

     3349, 3345, 3317,  602, 3313, 3317, 3309, 3306, 3306, 3302,
     3294,  382, 3310, 3283, 3263, 3264, 3249, 3240,  549, 3223,
        0,    0, 4082, 3212, 3198, 3197,  432, 3188,    0,  506,
     3193, 3192, 3185, 3192,  527, 3161, 3135, 4082, 4082, 4082,
     3172,  602,    0, 4082,    0, 3168,  716, 3144, 3130,  377,
     3103, 3102, 4082,  431, 3096,  907,  557, 4082, 3138, 4082,
      913,  917,  921,  926, 4082,  940,  944, 4082,  930,  948,
      956,  967,  961,  975,  979,  993,  998, 1004, 1014, 1019,
     1023, 1028, 1035, 1045, 1058, 1065, 1070, 1039, 1077, 1083,
     1087, 1093, 1105, 1112, 1122, 1132, 1140, 1147, 1151, 1157,

     1161, 1167, 1171, 4082, 1179,    0, 1188, 1196, 1208, 1218,
     1202, 1214, 1223, 1227, 1231, 1237, 1253, 1258, 1100, 1246,
     1268, 1274, 4082, 1283, 1290, 4082, 1296, 1306, 1295, 1320,
     1314, 1325, 1335, 1340, 1346, 1297, 1341, 1345, 1360, 1351,
     1362, 1372, 1383, 1385, 1364, 1394, 1402, 1403, 1404, 1409,
     1411, 1410, 1432, 1415, 1420, 1422, 1450, 1441, 1457, 1459,
     1469, 4082, 1473, 1463,    0, 1485, 1489, 1506, 1497, 1480,
     1501, 1510, 1514, 1519, 1529, 1536, 1540, 1551, 4082, 1556,
     1560, 1566, 4082, 3124,  569,  648,  586,  745,  670,  784,
      767,  733,  827,  838,  773,  859,  833,  717,  410,  841,

      303,  620,  835,  972,  974,  943,  901,  839,  960,  729,
     1002, 1577, 4082,  661,    0, 1080,  695,  185,  823,  988,
     1040, 1009,  837, 1571, 1581, 1588, 1593, 4082, 1597, 1603,
     1608, 1612, 4082, 1618, 3122, 3103, 3113, 3094, 3089, 3100,
     3089, 3083, 3077, 3088, 3078, 3051, 3050, 3046, 3038, 3042,
     3030, 3018, 3027, 3021, 3011, 3007, 3005, 2995, 2995, 1002,
     2981, 2993, 2987, 2972, 2940, 1625, 2931, 1531, 2923, 2933,
     2918, 2915, 2927, 1634, 1638, 1649, 4082, 1653, 1657, 4082,
     1661, 1665, 1671, 1643, 1675, 1682, 1692, 1696, 1703, 1713,
     1717, 1727, 1733, 1742, 1752, 1756, 1762, 1780, 1791, 1768,

     1800, 1772, 1807, 1811, 1817, 1821, 1832, 1828, 1838, 1842,
     1852, 1863, 1873, 1880, 1884, 1889, 1893, 1898, 1902, 1911,
     1915, 1921, 4082, 1961, 1965, 1858, 1903, 1941, 1943, 1937,
     1731, 1953, 1978, 1786, 1980, 1982, 1984, 1990, 1995, 1996,
     2005, 2004, 2006, 2027, 2010, 2033, 2035, 2044, 2049, 2054,
     2055, 2056, 2061, 2062, 2067, 2072, 2093, 2104, 2110, 2078,
     2115, 2116, 2120, 2121, 2125,  925, 1107, 1071, 1105,  610,
     1116, 1067, 1174, 1119,  900, 1144, 1167, 1173, 1184, 1296,
     1032, 1211, 1195,  997, 1217, 1225, 1323, 1241, 1253, 1513,
     1277, 1269, 1145, 1357, 1115, 2130, 1355, 2134, 1382,  295,

     1405,  927, 2171, 4082, 2175, 2933, 2916, 2889, 2900, 2900,
     2888, 2887, 2890, 2860, 2860, 2861, 2853, 2849, 2849, 2850,
     2854, 2842, 2837, 2813, 2802, 2799, 2807, 2806, 2796, 2780,
     2797, 2793, 2792, 2780, 2769, 2746, 2179, 4082, 2748, 2135,
     2737, 2734, 2741, 2136, 2757, 2189, 4082, 2193, 2197, 4082,
     2201, 2208, 2213, 2218, 2225, 2232, 2236, 2255, 2262, 2267,
     2274, 2278, 2282, 2286, 2292, 2305, 2309, 2321, 2330, 2336,
     2344, 2348, 2352, 2358, 2362, 2383, 2387, 2393, 2397, 2405,
     2409, 2414, 2446, 2418, 2422, 2432, 2436, 2440, 2453, 2147,
     2223, 2230, 2356, 2457, 2459, 2301, 2477, 2466, 2290, 2485,

     2491, 2496, 2500, 2507, 2501, 2511, 2517, 2515, 2526, 2538,
     2539, 2545, 2549, 2555, 2368, 2564, 2566, 2573, 2580, 2586,
     2595, 2590, 2601, 2603, 2607, 2611, 2612, 1363, 1422, 1479,
     1509,  541, 1491, 1530, 1305, 1590, 1369, 1038, 1669, 1467,
     1507, 1254, 1564, 1342, 1619, 1677, 1612, 1559, 1598, 1658,
     1703, 1729, 1453, 1710, 1735, 1739, 1698, 1636, 1794, 1726,
     1839, 2617, 2752, 2754, 2731, 2742, 4082, 2730, 2707, 4082,
     2701, 2695, 2694, 2690, 2683, 2660, 1665, 2652, 4082, 4082,
     2644, 2662, 2639, 2653, 2648, 2621, 2620, 2591, 4082, 4082,
     2587, 2587, 2561, 2558, 4082, 2554, 2551, 2162, 2526, 2542,

     2627, 2638, 2656, 2665, 2670, 2677, 2681, 2685, 2697, 2702,
     2709, 2716, 2723, 2728, 2737, 2732, 2741, 2746, 2754, 2763,
     2772, 2778, 2785, 2792, 2800, 2807, 2816, 2820, 2827, 2831,
     2835, 2839, 2845, 2851, 2858, 2862, 2866, 2724, 2870, 2846,
     2888, 2618, 2890, 2896, 2747, 2897, 2904, 2912, 2916, 2928,
     2920, 2927, 2935, 2934, 2936, 2942, 2944, 2951, 2955, 2966,
     2973, 2981, 2982, 2986, 2990, 2992, 2997, 2996, 3001, 3003,
     3005, 3010, 3016, 3027, 1838, 1784, 1755, 1915, 1886, 1937,
     1975, 2037, 2055, 2088, 2129, 1837, 2137, 1860, 1938, 2155,
     1965, 2206, 2218, 1679, 2329, 1925, 1980, 1901, 1908, 1063,

     1897, 2089, 2547, 4082, 2537, 4082, 2508, 4082, 4082, 4082,
     4082, 4082, 4082, 2111, 2506, 2494, 2499, 2484, 4082, 2439,
     4082, 4082, 2384, 4082, 2366, 2360, 2351, 2300, 2237, 2221,
     2188, 4082, 2156, 3048, 3053, 3057, 3062, 3069, 3073, 3078,
     3083, 3088, 3092, 3097, 3104, 3110, 3115, 3129, 3141, 3123,
     3145, 3150, 3160, 3164, 3168, 3172, 3176, 3185, 3190, 3199,
     3207, 3211, 3215, 3031, 3180, 3219, 3191, 3220, 3195, 3225,
     3230, 3234, 3238, 3242, 3259, 3254, 3250, 3264, 3268, 3273,
     3280, 3284, 3285, 3289, 3294, 3298, 3299, 3308, 3303, 3310,
     3314, 3315, 3319, 2417, 2454, 2011, 2476, 1991, 1815, 2460,

     2470, 2522, 2066, 2133, 2548, 2194, 2106, 2198, 2000, 2173,
     4082, 4082, 2141, 2060, 2054, 2009, 2004, 4082, 4082, 4082,
     1979, 1774, 4082, 1788, 1771, 1738, 3035, 1718, 1628, 3329,
     3338, 3345, 3354, 3366, 3359, 3373, 3377, 3383, 3389, 3394,
     3401, 3408, 3414, 3418, 3429, 3436, 3440, 3412, 3423, 3449,
     3453, 3455, 3457, 3461, 3463, 3467, 3471, 3487, 3480, 3475,
     3492, 3498, 3506, 3510, 3514, 2559, 2268, 2230, 2272, 2306,
     2571, 2174, 2612, 2368, 2314, 3515, 2324, 4082, 1539, 1454,
     1415, 1312, 4082, 1311, 4082, 1263, 3519, 3521, 1076, 3527,
     3529, 3533, 3538, 3557, 3578, 3549, 3584, 3588, 3592, 3598,

     3602, 3606, 3610, 3615, 3616, 3623, 3632, 3637, 3633, 3644,
     3653, 3660, 3661, 3667, 3671, 3672, 2402, 2450, 2621, 2229,
     2631, 1921, 3676, 3681,  977,  875, 4082,  808, 4082,  770,
     3682,  717, 4082, 3683,  694, 3691, 3712, 3718, 3729, 3736,
     3741, 3747, 3753, 3757, 3761, 3766, 3771, 3722, 3767, 3773,
     3775, 3785, 3779, 3787, 3791, 3792, 3798, 2639, 2433, 2649,
     2392, 4082,  653, 4082,  457, 4082, 4082, 3817, 3830, 3835,
     3845, 3849, 3854, 3822, 3859, 3860, 3861, 3865, 3867, 2678,
     2260, 4082,  448, 3873, 3877, 3883, 3884, 2495,  406, 3902,
     3889, 2512,  203, 3914, 3915, 2682, 4082, 3921, 3929, 4082,

     3967, 3973, 3979, 3985, 3991, 3997, 4003, 4009, 4015, 4021,
     4027, 4033, 4039, 4045, 4051, 4057, 4063, 4069,  105, 4075
    } ;

static yyconst flex_int16_t yy_def[1221] =
    {   0,
     1200,    1, 1201, 1202, 1203, 1203, 1204, 1204, 1200,    9,
     1200,   11, 1200,   13, 1205, 1205, 1200, 1200, 1200, 1200,
     1200, 1200, 1206, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1207, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1208, 1200, 1209,
     1200, 1200, 1210, 1209, 1209, 1209, 1211, 1200, 1200, 1211,
     1211, 1212, 1200, 1200, 1213, 1200, 1200, 1200, 1213, 1214,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213,   45, 1215, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1216, 1200, 1200, 1200, 1216, 1217, 1216, 1200,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
       45, 1218, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1200, 1200, 1200, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1200, 1219,   45, 1219, 1219, 1219, 1219, 1219, 1219, 1220,
     1200, 1200, 1200, 1200, 1220, 1200, 1200, 1206, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
       45, 1207, 1200, 1200, 1200, 1200, 1200, 1200, 1207, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1209, 1200, 1209, 1200, 1209, 1209, 1209, 1209,
     1211, 1211, 1200, 1211, 1211, 1211, 1212, 1200, 1200, 1200,
     1213, 1213, 1213, 1200, 1200, 1200, 1200, 1200, 1214, 1214,
     1213, 1214, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1200, 1213,  103, 1215, 1215, 1215, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1216, 1216,
     1216, 1200, 1200, 1200, 1200, 1200, 1217, 1217, 1216, 1217,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1200, 1200, 1216,  141, 1218, 1218, 1218, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1200, 1200, 1200,
     1200, 1200, 1200, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1200, 1200, 1219,  173, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1220, 1220, 1220, 1200, 1200, 1200, 1200,
     1200, 1220, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1209, 1211, 1211, 1211, 1200, 1200, 1213, 1200,
     1200, 1214, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1215, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1216, 1200, 1200, 1217, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1218, 1207, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1220, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1209, 1211, 1200, 1200, 1211, 1200,
     1200, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,

     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1209,

     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1209, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1219, 1219, 1219, 1219, 1219, 1219, 1219,

     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219, 1219,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1209, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1219, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1219, 1219, 1219, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213, 1213,

     1213, 1213, 1213, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1219, 1219, 1219, 1219,
     1219, 1219, 1219, 1219, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1213, 1213, 1213, 1213, 1213,
     1213, 1213, 1213, 1213, 1213, 1213, 1216, 1216, 1216, 1216,
     1216, 1216, 1216, 1216, 1216, 1216, 1216, 1219, 1219, 1219,
     1219, 1200, 1200, 1200, 1200, 1200, 1200, 1213, 1213, 1213,
     1213, 1213, 1213, 1216, 1216, 1216, 1216, 1216, 1216, 1219,
     1219, 1200, 1200, 1213, 1213, 1216, 1216, 1219, 1200, 1213,
     1216, 1219, 1200, 1213, 1216, 1219, 1200, 1213, 1216,    0,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200
    } ;

static yyconst flex_int16_t yy_nxt[4138] =
    {   0,
       18,   19,   20,   21,   19,   18,   22,   23,   18,   24,
       25,   26,   27,   28,   29,   18,   18,   30,   31,   18,
       32,   18,   18,   33,   18,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   18,   18,   43,   18,   18,   44,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   45,   73,   74,   45,   46,
       56,   57,   58,   59,   68,   69,   68,   69,   47,   55,
       61,   62,   63,   64,   73,   74,  181,  182,  183,  181,
      186,   48,  208,  186,  199,  184,  206,   65,  190,  191,
      190,  191,  193,  194,   49,  200,  209,  207,  195,   50,

      217,   51,  196,   52,  254,  197,   53,   54,  218,  255,
      384,   70,  185,   70,  258,  259,   71,   66,   71,   75,
       76,   77,   78,   76,   75,   79,   80,   75,   81,   82,
       83,   84,   85,   86,   75,   75,   87,   88,   75,   89,
       75,   75,   90,   75,   91,   92,   93,   94,   95,   96,
       97,   98,   99,   75,   75,  100,  101,   75,  102,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,  103,  210,  234,  103,  104,  181,
      182,  183,  181,  202,  215,  230,  203,  105,  184,  236,
      204,  237,  211,  205,  249, 1200,  216, 1200,  235,  209,

      106,  239,  241,  242,  240,  244,  246,  247,  190,  385,
      193,  386, 1200,  107, 1200,  185,  393, 1197,  108,  390,
      109,  411,  110,  598,  250,  111,  112,  113,  114,  115,
      116,  114,  113,  117,  118,  113,  119,  120,  121,  122,
      123,  124,  113,  113,  125,  126,  113,  127,  113,  113,
      128,  113,  129,  130,  131,  132,  133,  134,  135,  136,
      137,  113,  113,  138,  139,  113,  140,  113,  113,  113,
      113,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  113,  141, 1200, 1200,  141,  142,  262, 1200,  262,
      262,  264,  265,  266,  264,  143,  266,  268,  266,  266,

     1200, 1200,  404, 1200, 1200, 1200,  400, 1200,  144, 1200,
      387,  391,  402,  398,  388, 1200,  414,  389,  405,  417,
      401,  145,  392,  263,  399,  596,  146,  267,  147,  403,
      148,  582,  267,  149,  150,   18,  151,  152,  153,  151,
       18,   22,   23,   18,   24,   25,  154,   27,  155,   29,
      156,  156,  157,  158,  156,  159,  156,  156,  160,  156,
      161,  162,  163,  164,  165,  166,  167,  168,  169,  156,
      156,  170,  171,  156,  172,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,   18,   18,
      173, 1200, 1200,  173,   46,  262,  249,  262,  262,  270,

      455,  262,  270,   47,  320,  456,  271,  320,  262, 1200,
      262,  262,  262,  406,  262,  262,  174,  193,  194,  273,
      274,  262, 1200,  262,  262,  262,  250,  262,  262,  175,
      418,  263,  273,  274,  176,  272,  177,  275,  178,  580,
      321,  179,   54,  221,  263,  419,  221,  222,  263, 1193,
      320, 1200,  262,  320,  262,  262,  223,  263,  439,  394,
      440,  263,  395,  276,  277,  262,  396,  262,  262,  397,
      236,  262,  237,  262,  262,  262,  186,  262,  262,  186,
      254,  262,  224,  262,  262,  255,  321,  225,  263,  226,
      193,  194,  278,  281,  227,  228,  279,  320, 1189,  280,

      320,  263,  282,  262, 1183,  262,  262,  263,  331,  332,
     1200,  263,  262,  283,  262,  262,  262,  263,  262,  262,
      407,  262,  320,  262,  262,  320,  262, 1200,  262,  262,
      291,  285,  408,  321,  286,  284,  466,  451,  287,  263,
      289,  288,  420,  262,  292,  262,  262,  262,  263,  262,
      262,  290,  263, 1200,  234,  767,  295,  263,  321,  258,
      259,  293,  263,  262,  421,  262,  262,  262,  296,  262,
      262,  262,  463,  262,  262,  464,  235,  320,  294,  263,
      320,  193,  386,  263,  262,  300,  262,  262,  298,  303,
      304,  303,  303,  301,  262,  297,  262,  262, 1200,  263,

      299,  566,  302,  263,  239,  241,  242,  263,  306,  265,
      266,  306,  308,  321,  308,  308,  262,  446,  262,  262,
      263,  262, 1200,  262,  262,  263,  262,  732,  262,  262,
      263,  447, 1200,  305,  262,  310,  262,  262,  262, 1200,
      262,  262,  409,  262,  267,  262,  262,  583,  309,  292,
      410,  262,  263,  262,  262, 1200,  262,  263,  262,  262,
      193,  386,  263,  322,  323,  324,  322, 1182,  320,  314,
      263,  320,  311, 1200,  263,  324,  326,  324,  324,  263,
      333,  422, 1200,  423,  312,  313,  328,  263,  316,  328,
      317,  315,  263,  329,  320,  188,  568,  320,  320,  325,

      320,  320,  595,  320,  321,  331,  332, 1200,  318,  334,
      335,  325,  320,  320,  320,  320,  320,  320,  244,  246,
      247,  336,  330,  320,  320,  337,  320,  320,  338, 1200,
      321,  339,  320,  340,  321,  320,  321,  320,  349,  597,
      320, 1200,  347,  579,  341, 1200,  342, 1167,  321,  321,
      321,  343,  350,  348,  344,  592,  572, 1200,  345,  321,
      321,  346,  320,  320,  567,  320,  320,  353,  321,  320,
     1166,  320,  320,  321,  320,  320,  351,  320,  320, 1200,
      320,  361,  362,  363,  361, 1200,  571,  320,  354,  358,
      320, 1200,  356,  352,  416,  360, 1200,  359,  321,  321,

      367,  355,  229,  367,  357,  321,  575,  321,  401,  229,
     1165,  321,  320,  321,  569,  320,  570,  321,  365,  323,
      324,  365, 1164,  321,  320,  320,  364,  320,  320,  320,
      320,  320,  320,  320,  320, 1200,  368,  320,  369, 1200,
      320,  378,  379,  380,  378, 1200,  573, 1200,  321, 1200,
     1200, 1200,  350, 1200,  325,  590,  373,  574,  370,  425,
      321,  321,  425,  599,  578,  321,  321,  321,  375,  584,
      376, 1200,  581,  321,  576,  371,  372,  381,  374,  382,
      383,  382,  382,  412,  413,  412,  412,  602,  577,  377,
      415,  379,  380,  415, 1163,  426,  427,  428,  429,  427,

      431,  428,  431,  431,  432,  433,  434,  432,  476,  477,
      478,  476, 1200, 1200,  262,  381,  262,  262,  262,  737,
      262,  262,  479,  480,  479,  479,  381,  264,  265,  266,
      264,  270,  430,  262,  270,  589,  430, 1200,  271, 1200,
      426,  266,  265,  266,  266,  481,  304,  481,  481,  270,
      263,  262,  270,  728,  263, 1200,  271,  262,  263,  262,
      262,  474,  262,  267,  262,  262,  588,  272,  482,  480,
      479,  482, 1200,  762,  275,  271,  262,  267,  262,  262,
      262,  591,  262,  262, 1200,  272, 1200,  276,  277,  587,
      585, 1162,  275,  263,  262,  586,  262,  262,  263,  262,

     1200,  262,  262,  600,  272,  262,  483,  262,  262, 1200,
      276,  277,  263,  746, 1200,  262,  263,  262,  262,  484,
      262, 1200,  262,  262,  262,  593,  262,  262,  594,  262,
      263,  262,  262,  485,  630,  263,  262,  631,  262,  262,
      262,  263,  262,  262, 1200,  486,  262,  489,  262,  262,
     1200,  263, 1200,  487,  601,  488,  263,  743,  490,  262,
      263,  262,  262,  883,  491,  263,  262,  420,  262,  262,
      496,  262,  263,  262,  262, 1200,  263,  492,  262, 1200,
      262,  262,  263, 1200,  262,  494,  262,  262,  262,  421,
      262,  262, 1200,  734,  262,  263,  262,  262,  493,  495,

      730,  320,  263,  497,  320, 1008,  262,  263,  262,  262,
      596,  581,  498,  262,  263,  262,  262, 1200,  499, 1200,
      263,  500,  729,  262,  263,  262,  262, 1200, 1200, 1133,
      263, 1200,  501,  262,  736,  262,  262,  321,  731,  733,
      503,  262,  263,  262,  262,  504,  502,  505,  262,  263,
      262,  262,  262,  758,  262,  262, 1200, 1200,  262,  263,
      262,  262,  262,  506,  262,  262,  756,  508,  262,  263,
      262,  262,  303,  304,  303,  303,  738,  263,  509, 1200,
      262,  507,  262,  262,  263, 1200, 1200,  510,  263,  308,
      511,  308,  308,  512,  263,  739, 1200,  308,  263,  308,

      308,  735,  740,  262,  263,  262,  262, 1200,  263,  514,
      480,  514,  514,  741,  745,  262,  263,  262,  262,  262,
      513,  262,  262, 1200,  262,  309,  262,  262,  262, 1200,
      262,  262,  262,  309,  262,  262,  747, 1200,  262,  263,
      262,  262,  519,  744,  748,  309,  516,  320,  515,  499,
      320,  263,  517, 1200,  262,  263,  262,  262,  314,  262,
      263,  262,  262,  518,  263, 1200, 1200,  750,  263,  522,
      523,  524,  522,  751,  263,  322,  323,  324,  322,  887,
      315, 1200,  520,  321,  324,  323,  324,  324,  755, 1200,
      263,  363,  362,  363,  363,  263,  320,  328,  320,  320,

      328,  320, 1130,  521,  329,  321,  188,  328, 1200,  754,
      328,  325,  527,  742,  329,  320,  188, 1200,  320,  770,
      325,  525,  523,  524,  525, 1129,  320,  333,  329,  320,
      188, 1128,  321,  330,  321, 1200,  320,  334,  335,  320,
      749,  320,  320,  330,  320,  320,  320,  320,  333,  320,
      320,  321,  320,  526, 1200,  320,  779,  330,  334,  335,
      528,  320,  321,  320,  320,  320,  320, 1200,  320, 1200,
      532,  529,  321,  320,  757, 1200,  320,  321,  321,  537,
      875, 1200,  321,  321,  320,  533,  320,  320,  321,  320,
      530,  534,  531,  538, 1200,  320,  882,  321,  320,  321,

      759,  321,  535,  320,  320,  320,  320,  320,  320,  321,
      320,  320,  320,  320,  320,  320,  320, 1200,  536,  320,
      321,  320,  321,  320,  320,  539,  320,  760,  540, 1127,
      548,  321,  541,  320, 1200,  542,  320,  543,  544,  321,
      321,  321,  320,  549,  545,  320,  321,  321,  321,  761,
      546,  320,  321,  876,  320,  547,  550,  321,  320,  321,
      320,  320,  552,  320,  320, 1200,  551,  320,  896,  321,
      361,  362,  363,  361,  363,  362,  363,  363,  321, 1200,
     1126,  320,  554,  553,  320,  555,  367,  321,  229,  367,
      367, 1200,  229,  367,  321,  229,  321,  885,  320,  229,

      321,  320,  320, 1200,  556,  320,  321,  557,  523,  558,
      557,  320,  879,  877,  320,  320,  229,  321,  320, 1200,
      320, 1200,  368,  320,  560, 1200,  368,  559,  542,  563,
      320,  878,  640,  320,  321,  640,  886,  320,  321,  561,
      320,  320, 1200,  368,  320,  752,  373,  321,  753,  880,
      562,  321,  378,  379,  380,  378,  321,  382,  379,  382,
      382,  412,  413,  412,  412, 1125,  321,  382,  374,  382,
      382, 1200,  425,  321,  564,  425, 1200,  321,  412,  413,
      412,  412,  425,  888,  641,  425,  565,  891,  381,  603,
      604,  605,  603,  381,  427,  428,  429,  427,  431,  428,

      431,  431, 1200,  381,  434,  433,  434,  434,  426,  431,
     1200,  431,  431,  432,  433,  434,  432,  892,  426,  434,
      433,  434,  434,  881, 1200,  426,  637,  638,  637,  637,
      430, 1200, 1029,  780,  430,  646,  647,  648,  646,  649,
      650,  651,  649,  890,  262,  430,  262,  262, 1200,  426,
      476,  477,  478,  476,  478,  477,  478,  478,  479,  480,
      479,  479,  481,  304,  481,  481,  482,  480,  479,  482,
     1200,  652,  262,  271,  262,  262,  262,  893,  262,  262,
      263, 1200,  915,  262,  483,  262,  262,  899,  474, 1200,
      653, 1200,  474,  262,  263,  262,  262,  262,  916,  262,

      262,  884,  272,  252,  262, 1003,  262,  262,  263,  889,
     1200,  654,  263,  656,  262, 1200,  262,  262,  262,  263,
      262,  262, 1200,  894,  789,  655,  657,  898,  262,  263,
      262,  262,  320,  263,  262,  320,  262,  262, 1200,  658,
      263, 1200,  660,  262,  659,  262,  262, 1200,  694,  790,
      263, 1200,  661,  262,  263,  262,  262,  262, 1090,  262,
      262,  897,  895,  262,  263,  262,  262, 1200,  321,  262,
      263,  262,  262,  262,  662,  262,  262,  901, 1087,  263,
      663,  262, 1086,  262,  262,  664,  995,  320,  670,  263,
      320,  665,  262,  263,  262,  262, 1200,  666,  904,  263,

      668,  262, 1085,  262,  262,  263, 1200, 1084,  262,  263,
      262,  262,  262,  697,  262,  262,  667,  263,  262,  669,
      262,  262,  262,  321,  262,  262,  671, 1200,  263,  262,
      672,  262,  262,  262,  673,  262,  262,  263, 1070,  262,
      900,  262,  262,  262,  263,  262,  262,  674,  263, 1200,
     1200, 1200,  675,  262,  263,  262,  262,  994,  263,  320,
      676,  679,  320,  677,  262,  263,  262,  262,  997,  263,
      678,  526, 1200,  680,  262,  263,  262,  262,  902,  263,
      681,  514,  480,  514,  514,  683,  638,  683,  683,  263,
      262, 1000,  262,  262,  685,  321,  262,  685, 1200,  262,

      263,  262,  262,  262,  320,  262,  262,  320,  996, 1200,
      263,  682,  262, 1200,  262,  262,  262,  309,  262,  262,
     1200,  263,  522,  523,  524,  522,  263, 1200, 1006,  906,
      263,  690,  515, 1200,  684,  263, 1009, 1200,  320,  263,
      321,  320,  320,  687,  320,  320,  686,  320,  263, 1200,
     1200,  908,  263, 1007,  320,  688,  691,  320,  321, 1004,
     1161,  689,  524,  523,  524,  524,  525,  523,  524,  525,
      693, 1001,  692,  329,  321,  188,  695, 1200,  321,  320,
      321,  320,  320,  320,  320,  320,  320, 1200,  320,  909,
      321,  320, 1200, 1083,  320,  698,  320,  320, 1002,  320,

      320,  699,  330, 1200,  696,  320,  320,  320,  320,  320,
      320,  320, 1200, 1005,  320,  321,  700,  321,  701,  321,
     1069,  321,  704, 1200,  702,  703,  708,  321,  320,  705,
     1082,  320,  321,  321,  320, 1081,  320,  320,  706,  320,
     1076,  321,  321,  321, 1066,  320,  707,  321,  320, 1200,
      320,  910,  709,  320,  710,  320,  320,  320,  320,  320,
      320,  711,  320,  320,  321,  320,  320, 1200,  320,  911,
      321,  320,  321,  320,  713,  712,  320, 1080, 1200,  320,
      717,  321,  320,  718,  719, 1071,  321,  714,  716, 1079,
      715,  321,  321,  321,  557,  523,  558,  557,  321,  321,

     1200, 1200,  912,  229,  321,  558,  523,  558,  558,  321,
      720,  721,  638,  637,  721,  321,  723,  320, 1200,  723,
      320,  320,  320,  722,  320,  320,  320, 1010, 1014,  320,
      368,  637,  638,  637,  637,  640,  640,  798,  640,  640,
      798, 1200, 1200,  913, 1015, 1200, 1200,  321,  320, 1200,
      559,  320,  321,  321,  998, 1078, 1074,  321,  321, 1072,
     1029,  725,  321,  798,  838,  726,  798, 1200,  724,  919,
      999,  727,  603,  604,  605,  603,  605,  604,  605,  605,
      637,  638,  637,  637,  321, 1200, 1200,  641,  641,  799,
      646,  647,  648,  646,  648,  647,  648,  648,  649,  650,

      651,  649,  651,  650,  651,  651, 1200, 1121,  426,  262,
     1200,  262,  262, 1073,  262,  799,  262,  262, 1200,  262,
      921,  262,  262, 1077,  320,  801,  262,  320,  262,  262,
     1200,  320,  922,  262,  320,  262,  262,  262, 1028,  262,
      262, 1200, 1200,  252,  802,  263,  805,  804, 1160, 1075,
      263,  252,  803, 1118,  839,  263,  262,  806,  262,  262,
      321, 1027,  263,  262,  840,  262,  262,  321,  262,  263,
      262,  262, 1200,  263,  807,  262,  808,  262,  262,  262,
     1200,  262,  262,  262, 1200,  262,  262,  262, 1026,  262,
      262,  320,  263,  262,  320,  262,  262, 1117, 1119,  263,

      809,  810,  320,  811,  263,  320,  262, 1188,  262,  262,
      262,  263,  262,  262,  812,  263,  813,  847, 1200,  263,
      844,  814,  262,  263,  262,  262, 1200,  321,  816,  263,
      815,  262, 1120,  262,  262,  817, 1200,  262,  321,  262,
      262, 1200,  263,  924,  818,  262,  263,  262,  262,  262,
     1025,  262,  262,  262, 1123,  262,  262,  320,  263,  262,
      320,  262,  262,  262, 1124,  262,  262,  263,  819,  320,
     1024,  822,  320,  263, 1023,  820,  821,  823,  841, 1122,
     1200,  263,  824,  863,  262,  263,  262,  262,  262,  263,
      262,  262, 1022,  321,  262,  263,  262,  262,  262,  263,

      262,  262,  826, 1021, 1200,  321,  262,  827,  262,  262,
      262,  828,  262,  262, 1200,  262,  825,  262,  262,  262,
      263,  262,  262,  685,  263,  262,  685,  829, 1158, 1200,
      263, 1011, 1181,  262,  263,  262,  262,  262,  830,  262,
      262,  262,  263,  262,  262, 1200,  263,  683,  638,  683,
      683,  263, 1180, 1020,  836,  263,  262,  836,  320,  263,
      320,  320, 1200,  320,  832,  831, 1200,  320, 1012,  263,
      320,  842, 1200,  263, 1018,  686, 1159,  263,  320,  835,
      843,  320, 1200,  263, 1019,  833,  320,  834, 1200,  320,
      263,  845,  320, 1067,  321,  320,  321,  320, 1019,  846,

      320,  320,  320,  321,  320,  320,  837, 1200,  320, 1068,
      848,  320,  320, 1018,  321,  320,  320, 1017,  320,  320,
      853,  320,  321,  849, 1200,  854,  850,  320,  321,  851,
      320,  855,  852,  321, 1200, 1016, 1020,  321,  321,  320,
      320, 1013,  320,  320,  321, 1192,  320,  856,  321,  320,
      320, 1012,  321,  320,  321, 1196,  320,  857,  859,  320,
     1200, 1011, 1023,  321,  860,  320,  858,  320,  320,  861,
      320, 1200,  933, 1078,  320,  321,  321,  320,  864,  932,
      865,  320,  321, 1200,  320, 1083,  321,  320,  862,  931,
      320,  320,  321,  930,  320,  866,  721,  638,  637,  721,

      929,  321,  723,  321,  320,  723,  928,  320,  320,  867,
      321,  320,  320,  873,  927,  320,  873,  321,  798,  320,
      926,  798,  320,  321, 1200,  925, 1085,  321,  262, 1200,
      262,  262,  321, 1200,  924, 1127,  869,  868,  321,  262,
      321,  262,  262, 1200,  321, 1129,  934,  923,  321,  321,
      872, 1200,  935, 1162,  724,  321,  870,  262,  871,  262,
      262, 1200,  922, 1164,  263,  874,  262,  921,  262,  262,
      799,  262,  920,  262,  262,  263,  919,  918,  262,  937,
      262,  262,  262,  917,  262,  262,  262,  936,  262,  262,
     1200,  914, 1182,  263, 1200,  939, 1197,  913,  262,  938,

      262,  262,  263,  262,  912,  262,  262,  263,  911,  910,
      262,  940,  262,  262,  263,  909,  941,  262,  263,  262,
      262,  908,  263,  942,  262,  320,  262,  262,  320,  262,
      943,  262,  262,  262,  263,  262,  262,  944,  262,  263,
      262,  262,  262,  964,  262,  262,  263,  262,  320,  262,
      262,  320,  907,  263,  946,  262,  906,  262,  262,  945,
      263,  321,  905,  948,  262,  263,  262,  262,  904,  263,
      947,  903,  800,  262,  263,  262,  262,  950,  263,  262,
      797,  262,  262,  263,  321,  796,  262,  949,  262,  262,
      795,  263,  952,  262,  794,  262,  262,  793,  792,  953,

      263,  262,  791,  262,  262,  951,  790,  789,  262,  263,
      262,  262,  788,  787,  955,  263,  786,  262,  954,  262,
      262,  262,  263,  262,  262,  785,  784,  783,  262,  263,
      262,  262,  262,  782,  262,  262,  262,  263,  262,  262,
      262,  956,  262,  262,  263,  781,  262,  320,  262,  262,
      320,  780,  262,  263,  262,  262,  779,  263,  958,  262,
      957,  262,  262,  836,  263,  262,  836,  262,  263,  262,
      262,  320,  263,  778,  320,  777,  263,  966,  776,  775,
      959,  960,  263,  321,  965,  774,  773,  772,  263,  320,
      961,  320,  320,  771,  320,  263,  962,  320,  320,  263,

      320,  320,  967,  263,  770,  320,  769,  321,  320,  768,
      969,  970,  968,  320,  767,  837,  320,  320,  971,  963,
      320,  320,  766,  765,  320,  321,  972,  321,  320,  320,
      973,  320,  320,  321,  321,  320,  320,  320,  320,  320,
      320,  321,  974,  320,  976,  320,  320,  764,  320,  321,
      763,  975,  320,  321,  645,  320,  320,  321,  980,  320,
      977,  644,  643,  466,  321,  321,  978,  320,  642,  982,
      320,  321,  321,  321,  320,  979,  639,  320,  636,  321,
      983,  321,  320,  320,  981,  320,  320,  320,  321,  635,
      320,  320,  321,  320,  320,  985,  320,  320,  320,  984,

      320,  320,  320,  321,  320,  320,  320,  320,  634,  320,
      321,  320,  633,  632,  320,  629,  986,  873,  321,  321,
      873,  628,  627,  321,  988,  987,  626,  321,  320,  321,
      625,  320,  320,  321,  321,  320, 1088,  624,  321, 1088,
      321,  989,  321,  990,  991, 1048,  623,  321,  992,  262,
      622,  262,  262,  321,  262,  621,  262,  262,  262,  620,
      262,  262, 1030,  262,  321,  262,  262,  619,  321,  874,
      262, 1031,  262,  262,  262,  618,  262,  262,  617,  262,
      993,  262,  262,  616,  262,  263,  262,  262, 1089,  262,
      263,  262,  262,  262,  263,  262,  262,  615,  262,  263,

      262,  262, 1032,  614,  613,  262,  263,  262,  262,  612,
      263,  262,  611,  262,  262,  263,  262,  610,  262,  262,
      263, 1033,  609,  608,  262,  263,  262,  262,  607,  263,
      262,  606,  262,  262,  263,  435, 1200, 1034, 1036, 1035,
      258,  263,  262, 1037,  262,  262,  262,  263,  262,  262,
      475,  262,  263,  262,  262, 1038,  474,  252,  248, 1039,
      263,  262,  473,  262,  262,  262,  263,  262,  262,  262,
      244,  262,  262,  262,  239,  262,  262,  262,  263,  262,
      262,  320,  263, 1040,  320,  472,  262,  263,  262,  262,
     1042,  262,  320,  262,  262,  320,  320,  263, 1041,  320,

      262,  263,  262,  262, 1043,  263,  471,  470,  262,  263,
      262,  262,  262,  263,  262,  262,  262,  321,  262,  262,
      320,  320,  263,  320,  320,  469,  320,  263,  321,  320,
      468,  320,  321, 1049,  320,  320,  263,  467,  320,  320,
     1044,  238,  320,  320,  263,  233,  320, 1046,  263,  232,
     1045,  320,  263, 1050,  320,  320,  321,  321,  320,  231,
      320, 1047,  321,  320,  465,  320,  462,  321,  320,  320,
      461,  321,  320, 1054,  320,  321, 1051,  320, 1055,  321,
      460,  320, 1056, 1053,  320,  320,  320,  321,  320,  320,
      320,  321, 1052,  320, 1057,  320,  321,  459,  320,  320,

      320,  321,  320,  320,  320,  321,  458,  320, 1058,  320,
      321,  320,  320, 1060,  320,  320,  320,  321,  320,  320,
      320,  321,  321,  320, 1059,  457,  321, 1061,  454,  453,
      262,  321,  262,  262,  452,  321,  321,  451,  450,  262,
      321,  262,  262,  449,  448,  321,  262,  321,  262,  262,
      445,  321,  321, 1062, 1064,  262,  321,  262,  262, 1091,
      262, 1063,  262,  262,  444, 1065,  263,  262,  443,  262,
      262,  442,  441,  438,  262,  263,  262,  262,  262,  437,
      262,  262,  263, 1092,  262, 1094,  262,  262,  436, 1093,
      262,  263,  262,  262,  435,  262,  263,  262,  262, 1095,

      192,  192,  262,  263,  262,  262,  189, 1200, 1096,  262,
      263,  262,  262,  320,  263,  262,  320,  262,  262,  262,
      263,  262,  262,  260,  320,  256,  263,  320, 1098, 1099,
      262,  263,  262,  262, 1097,  253,  252, 1101,  263,  262,
     1101,  262,  248,  262,  262,  263,  244,  239,  238,  321,
      320,  263,  233,  320,  320,  263,  320,  320,  320,  320,
      321,  320,  320, 1104,  320,  320,  263,  320,  320, 1100,
      232,  320,  320,  263,  231,  320,  320,  263, 1106,  320,
     1103,  320, 1105, 1107,  320,  220,  321, 1108,  320, 1102,
      321,  320,  321,  320,  321,  219,  320,  214,  321,  320,

      321, 1109,  320,  213,  321,  212, 1111,  320,  321, 1112,
      320, 1114,  321, 1110, 1114,  320, 1088,  321,  320, 1088,
     1131,  201, 1088, 1131,  321, 1088,  198, 1200, 1134,  321,
      262, 1134,  262,  262,  262,  321,  262,  262,  192,  262,
      189,  262,  262,  321,  187, 1200, 1113,  321, 1200, 1200,
      262,  321,  262,  262, 1116, 1200, 1200, 1200,  262, 1136,
      262,  262, 1200, 1115, 1137, 1200,  263, 1200, 1089, 1200,
      263, 1138, 1132, 1200, 1089,  263, 1200, 1200, 1200,  262,
     1135,  262,  262, 1200, 1200,  262,  263,  262,  262,  262,
     1200,  262,  262,  262,  263,  262,  262, 1139, 1140, 1142,

     1200,  262, 1142, 1101, 1200,  262, 1101,  262, 1200,  262,
      262, 1145, 1200,  262, 1145,  263,  320,  320, 1200,  320,
      320,  263, 1200, 1200,  320,  263, 1200,  320, 1200,  263,
     1200, 1141, 1200,  320,  320,  263,  320,  320,  320,  263,
     1200,  320, 1147,  263, 1200,  320, 1149,  263,  320, 1148,
     1200, 1143,  321,  321,  320, 1102, 1150,  320, 1151, 1144,
      321,  320, 1153, 1146,  320, 1153, 1200, 1200, 1114,  321,
      321, 1114,  320, 1156,  321,  320, 1156, 1131, 1200, 1200,
     1131,  321, 1134, 1131, 1134, 1134, 1131, 1134, 1200, 1200,
      321, 1200,  262, 1200,  262,  262, 1200,  321,  321, 1152,

     1200, 1200, 1200, 1200,  321, 1168, 1200, 1200,  321,  321,
     1200, 1200, 1200,  262, 1154,  262,  262, 1200, 1200,  262,
     1115,  262,  262,  320, 1155, 1157,  320, 1200,  263, 1132,
      262, 1169,  262,  262, 1135, 1132, 1135,  262, 1200,  262,
      262, 1175,  262, 1170,  262,  262, 1200, 1200, 1142,  263,
      262, 1142, 1200, 1200,  262,  263,  262,  262,  262,  321,
      262,  262, 1145, 1200,  262, 1145,  263,  262,  320,  262,
      262,  320,  320,  263,  320,  320,  320,  320,  263,  320,
     1153, 1171, 1200, 1153,  263, 1174,  320, 1176,  320,  320,
      263,  320,  320, 1156,  263,  320, 1156, 1200,  263,  320,

     1143, 1200,  320,  263,  321, 1200, 1172, 1200,  321, 1200,
      321, 1200,  321, 1200, 1146, 1200,  321, 1200,  262, 1173,
      262,  262,  321,  320,  321, 1177,  320, 1200,  321,  321,
     1200,  262, 1154,  262,  262,  321,  262, 1200,  262,  262,
     1178, 1200, 1200, 1200, 1184, 1157,  262, 1200,  262,  262,
      262, 1179,  262,  262,  263,  262, 1200,  262,  262,  321,
      320,  320,  320,  320,  320,  320,  320,  263,  320,  320,
     1200,  320,  263, 1186,  262, 1200,  262,  262,  262, 1200,
      262,  262,  263, 1200,  320,  320,  263,  320,  320, 1200,
      320,  263, 1185,  320, 1200, 1200,  321,  321,  321, 1200,

     1200, 1200,  321,  262,  321,  262,  262, 1200, 1187, 1200,
      263, 1200, 1200, 1200,  263,  262,  320,  262,  262,  320,
      321,  321,  262, 1200,  262,  262,  321, 1190, 1198, 1199,
      320, 1200, 1195,  320, 1191, 1200, 1200, 1200, 1200,  263,
     1200, 1200, 1200, 1200, 1200, 1194, 1200, 1200, 1200, 1200,
     1200,  263,  321, 1200, 1200, 1200, 1200, 1200,  263, 1200,
     1200, 1200, 1200, 1200, 1200, 1200,  321,   55,   55,   55,
       55,   55,   55,   60,   60,   60,   60,   60,   60,   67,
       67,   67,   67,   67,   67,   72,   72,   72,   72,   72,
       72,  180,  180,  180,  180,  180,  180,  188,  188, 1200,

     1200,  188,  188,  229,  229, 1200,  229,  229,  229,  240,
      240,  240,  240,  240,  240,  243, 1200, 1200, 1200,  243,
      243,  245,  245,  245,  245,  245,  245,  251,  251, 1200,
     1200,  251,  251,  257,  257,  257,  257,  257,  257,  261,
      261, 1200,  261,  261,  261,  269,  269, 1200,  269,  269,
      269,  307,  307, 1200,  307,  307,  307,  319,  319, 1200,
     1200, 1200,  319,  327,  327, 1200, 1200,  327,  327,  366,
      366, 1200,  366,  366,  366,  424,  424, 1200, 1200, 1200,
      424,   17, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200
    } ;

static yyconst flex_int16_t yy_chk[4138] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    7,    7,    2,    2,
        3,    3,    3,    3,    5,    5,    6,    6,    2,    4,
        4,    4,    4,    4,    8,    8,   15,   15,   15,   15,
       19,    2,   36,   19,   32,   15,   35,    4,   24,   24,
       26,   26,   28,   28,    2,   32,   36,   35,   30,    2,

       42,    2,   30,    2,   70,   30,    2,    2,   42,   70,
     1219,    5,   15,    6,   72,   72,    5,    4,    6,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,   10,   37,   52,   10,   10,   16,
       16,   16,   16,   34,   41,   48,   34,   10,   16,   53,
       34,   53,   37,   34,   66,  160,   41,  418,   52,   48,

       10,   58,   58,   58,   63,   63,   63,   63,  154,  154,
      155,  155,  158,   10,  170,   16,  160, 1193,   10,  158,
       10,  170,   10,  418,   66,   10,   10,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   12,  165,  175,   12,   12,   75,  172,   75,
       75,   76,   76,   76,   76,   12,   78,   78,   78,   78,

      157,  159,  165,  163,  166,  162,  163,  600,   12,  164,
      157,  159,  164,  162,  157,  401,  172,  157,  166,  175,
      163,   12,  159,   75,  162,  600,   12,   76,   12,  164,
       12,  401,   78,   12,   12,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       14,  176,  167,   14,   14,   79,  250,   79,   79,   80,

      212,   80,   80,   14,  113,  212,   80,  113,   81,  177,
       81,   81,   82,  167,   82,   82,   14,  191,  191,   81,
       81,   83,  399,   83,   83,   84,  250,   84,   84,   14,
      176,   79,   83,   83,   14,   80,   14,   84,   14,  399,
      113,   14,   14,   45,   81,  177,   45,   45,   82, 1189,
      117,  161,   85,  117,   85,   85,   45,   83,  198,  161,
      198,   84,  161,   85,   85,   86,  161,   86,   86,  161,
      227,   87,  227,   87,   87,   88,  186,   88,   88,  186,
      254,   89,   45,   89,   89,  254,  117,   45,   85,   45,
      194,  194,   87,   88,   45,   45,   87,  119, 1183,   87,

      119,   86,   89,   90, 1165,   90,   90,   87,  119,  119,
      168,   88,   91,   89,   91,   91,   93,   89,   93,   93,
      168,   92,  124,   92,   92,  124,   95,  178,   95,   95,
       93,   91,  168,  119,   91,   90,  230,  230,   91,   90,
       92,   91,  178,   96,   93,   96,   96,   94,   91,   94,
       94,   92,   93,  732,  235,  732,   95,   92,  124,  257,
      257,   94,   95,   97,  178,   97,   97,   98,   96,   98,
       98,   99,  219,   99,   99,  219,  235,  143,   94,   96,
      143,  385,  385,   94,  100,   99,  100,  100,   98,  101,
      101,  101,  101,   99,  102,   97,  102,  102,  387,   97,

       98,  387,  100,   98,  242,  242,  242,   99,  103,  103,
      103,  103,  104,  143,  104,  104,  105,  204,  105,  105,
      100,  106,  570,  106,  106,  101,  107,  570,  107,  107,
      102,  204,  402,  102,  108,  106,  108,  108,  109,  169,
      109,  109,  169,  110,  103,  110,  110,  402,  104,  106,
      169,  111,  105,  111,  111,  179,  112,  106,  112,  112,
      386,  386,  107,  114,  114,  114,  114, 1163,  122,  110,
      108,  122,  107,  414,  109,  116,  116,  116,  116,  110,
      122,  179,  389,  179,  108,  109,  118,  111,  111,  118,
      111,  110,  112,  118,  121,  118,  389,  121,  123,  114,

      125,  123,  414,  125,  122,  121,  121,  417,  112,  123,
      123,  116,  127,  126,  128,  127,  126,  128,  247,  247,
      247,  125,  118,  130,  131,  125,  130,  131,  125,  398,
      121,  126,  129,  127,  123,  129,  125,  133,  131,  417,
      133,  410,  130,  398,  127,  392,  128, 1135,  127,  126,
      128,  129,  131,  130,  129,  410,  392,  388,  129,  130,
      131,  129,  132,  134,  388,  132,  134,  133,  129,  135,
     1132,  136,  135,  133,  136,  137,  132,  138,  137,  391,
      138,  139,  139,  139,  139,  395,  391,  140,  134,  137,
      140,  174,  136,  132,  174,  138,  390,  137,  132,  134,

      142,  135,  142,  142,  136,  135,  395,  136,  174,  142,
     1130,  137,  145,  138,  390,  145,  390,  139,  141,  141,
      141,  141, 1128,  140,  144,  146,  140,  144,  146,  147,
      148,  149,  147,  148,  149,  419,  142,  150,  144,  393,
      150,  151,  151,  151,  151,  397,  393,  403,  145,  423,
      394,  408,  144,  400,  141,  408,  148,  394,  145,  180,
      144,  146,  180,  419,  397,  147,  148,  149,  149,  403,
      149,  396,  400,  150,  396,  146,  147,  151,  148,  153,
      153,  153,  153,  171,  171,  171,  171,  423,  396,  150,
      173,  173,  173,  173, 1126,  180,  181,  181,  181,  181,

      183,  183,  183,  183,  185,  185,  185,  185,  256,  256,
      256,  256,  575,  407,  261,  153,  261,  261,  262,  575,
      262,  262,  263,  263,  263,  263,  173,  264,  264,  264,
      264,  269,  181,  269,  269,  407,  183,  566,  269,  602,
      185,  266,  266,  266,  266,  267,  267,  267,  267,  270,
      261,  270,  270,  566,  262,  406,  270,  271,  263,  271,
      271,  256,  273,  264,  273,  273,  406,  269,  272,  272,
      272,  272,  409,  602,  273,  272,  274,  266,  274,  274,
      275,  409,  275,  275,  404,  270,  405,  274,  274,  405,
      404, 1125,  275,  271,  276,  404,  276,  276,  273,  277,

      420,  277,  277,  420,  272,  278,  276,  278,  278,  584,
      277,  277,  274,  584,  411,  279,  275,  279,  279,  278,
      280,  422,  280,  280,  281,  411,  281,  281,  411,  282,
      276,  282,  282,  279,  460,  277,  283,  460,  283,  283,
      288,  278,  288,  288,  581,  280,  284,  282,  284,  284,
      738,  279,  421,  281,  422,  281,  280,  581,  283,  285,
      281,  285,  285,  738,  284,  282,  286,  421,  286,  286,
      288,  287,  283,  287,  287,  900,  288,  285,  289,  572,
      289,  289,  284,  568,  290,  287,  290,  290,  291,  421,
      291,  291,  416,  572,  292,  285,  292,  292,  286,  287,

      568,  319,  286,  289,  319,  900,  293,  287,  293,  293,
      416,  416,  290,  294,  289,  294,  294,  569,  291,  567,
      290,  292,  567,  295,  291,  295,  295,  595,  571, 1089,
      292,  574,  293,  296,  574,  296,  296,  319,  569,  571,
      295,  297,  293,  297,  297,  295,  294,  296,  298,  294,
      298,  298,  299,  595,  299,  299,  576,  593,  300,  295,
      300,  300,  301,  297,  301,  301,  593,  299,  302,  296,
      302,  302,  303,  303,  303,  303,  576,  297,  300,  577,
      305,  298,  305,  305,  298,  578,  573,  301,  299,  307,
      302,  307,  307,  302,  300,  577,  579,  308,  301,  308,

      308,  573,  578,  311,  302,  311,  311,  583,  303,  309,
      309,  309,  309,  579,  583,  312,  305,  312,  312,  310,
      305,  310,  310,  582,  313,  307,  313,  313,  314,  585,
      314,  314,  315,  308,  315,  315,  585,  586,  316,  311,
      316,  316,  314,  582,  586,  309,  311,  320,  310,  310,
      320,  312,  312,  588,  317,  310,  317,  317,  315,  318,
      313,  318,  318,  313,  314,  589,  742,  588,  315,  321,
      321,  321,  321,  589,  316,  322,  322,  322,  322,  742,
      315,  592,  316,  320,  324,  324,  324,  324,  592,  591,
      317,  325,  325,  325,  325,  318,  329,  327,  336,  329,

      327,  336, 1086,  317,  327,  321,  327,  328,  580,  591,
      328,  322,  336,  580,  328,  331,  328,  735,  331,  735,
      324,  330,  330,  330,  330, 1084,  332,  331,  330,  332,
      330, 1082,  329,  327,  336,  587,  333,  332,  332,  333,
      587,  334,  337,  328,  334,  337,  338,  335,  333,  338,
      335,  331,  340,  334,  744,  340,  744,  330,  335,  335,
      337,  339,  332,  341,  339,  345,  341,  597,  345,  594,
      340,  338,  333,  342,  594,  728,  342,  334,  337,  345,
      728,  737,  338,  335,  343,  341,  344,  343,  340,  344,
      339,  342,  339,  345,  599,  346,  737,  339,  346,  341,

      597,  345,  343,  347,  348,  349,  347,  348,  349,  342,
      350,  352,  351,  350,  352,  351,  354,  601,  344,  354,
      343,  355,  344,  356,  355,  346,  356,  599,  347, 1081,
      354,  346,  348,  353,  729,  349,  353,  350,  351,  347,
      348,  349,  358,  355,  352,  358,  350,  352,  351,  601,
      353,  357,  354,  729,  357,  353,  356,  355,  359,  356,
      360,  359,  358,  360,  364,  753,  357,  364,  753,  353,
      361,  361,  361,  361,  363,  363,  363,  363,  358,  740,
     1080,  370,  360,  359,  370,  360,  366,  357,  366,  366,
      367,  730,  367,  367,  359,  366,  360,  740,  369,  367,

      364,  369,  371,  733,  364,  371,  361,  368,  368,  368,
      368,  372,  733,  730,  372,  373,  368,  370,  373,  741,
      374,  731,  366,  374,  370,  590,  367,  369,  369,  373,
      375,  731,  468,  375,  369,  468,  741,  376,  371,  371,
      376,  377,  734,  368,  377,  590,  374,  372,  590,  734,
      372,  373,  378,  378,  378,  378,  374,  380,  380,  380,
      380,  381,  381,  381,  381, 1079,  375,  382,  374,  382,
      382,  748,  424,  376,  375,  424,  743,  377,  412,  412,
      412,  412,  425,  743,  468,  425,  376,  748,  378,  426,
      426,  426,  426,  380,  427,  427,  427,  427,  429,  429,

      429,  429,  736,  382,  430,  430,  430,  430,  424,  431,
      749,  431,  431,  432,  432,  432,  432,  749,  425,  434,
      434,  434,  434,  736,  747,  426,  466,  466,  466,  466,
      427,  745, 1029,  745,  429,  474,  474,  474,  474,  475,
      475,  475,  475,  747,  484,  431,  484,  484,  758,  432,
      476,  476,  476,  476,  478,  478,  478,  478,  479,  479,
      479,  479,  481,  481,  481,  481,  482,  482,  482,  482,
      750,  484,  483,  482,  483,  483,  485,  750,  485,  485,
      484,  739,  777,  486,  483,  486,  486,  758,  474,  746,
      485,  894,  475,  487,  479,  487,  487,  488,  777,  488,

      488,  739,  482,  476,  489,  894,  489,  489,  483,  746,
      757,  486,  485,  488,  490,  751,  490,  490,  491,  486,
      491,  491,  754,  751,  754,  487,  489,  757,  492,  487,
      492,  492,  531,  488,  493,  531,  493,  493,  760,  490,
      489,  752,  492,  494,  491,  494,  494,  755,  531,  755,
      490,  756,  493,  495,  491,  495,  495,  496, 1028,  496,
      496,  756,  752,  497,  492,  497,  497,  877,  531,  500,
      493,  500,  500,  502,  494,  502,  502,  760, 1026,  494,
      495,  498, 1025,  498,  498,  496,  877,  534,  502,  495,
      534,  497,  499,  496,  499,  499,  876,  498,  876,  497,

      500,  501, 1024,  501,  501,  500,  759, 1022,  503,  502,
      503,  503,  504,  534,  504,  504,  499,  498,  505,  501,
      505,  505,  506,  534,  506,  506,  503,  999,  499,  508,
      504,  508,  508,  507,  505,  507,  507,  501,  999,  509,
      759,  509,  509,  510,  503,  510,  510,  506,  504,  886,
      875,  761,  507,  511,  505,  511,  511,  875,  506,  526,
      508,  510,  526,  508,  512,  508,  512,  512,  886,  507,
      509,  526,  888,  511,  513,  509,  513,  513,  761,  510,
      512,  514,  514,  514,  514,  515,  515,  515,  515,  511,
      516,  888,  516,  516,  517,  526,  517,  517,  879,  518,

      512,  518,  518,  519,  527,  519,  519,  527,  879,  901,
      513,  513,  520,  898,  520,  520,  521,  514,  521,  521,
      899,  515,  522,  522,  522,  522,  516,  878,  898,  878,
      517,  527,  519, 1122,  516,  518,  901,  896,  530,  519,
      527,  530,  528,  518,  529,  528,  517,  529,  520,  880,
      889,  880,  521,  899,  532,  520,  528,  532,  522,  896,
     1122,  521,  524,  524,  524,  524,  525,  525,  525,  525,
      530,  889,  529,  525,  530,  525,  532,  891,  528,  533,
      529,  535,  533,  536,  535,  537,  536,  881,  537,  881,
      532,  538,  897, 1021,  538,  535,  539,  540,  891,  539,

      540,  536,  525,  998,  533,  542,  541,  543,  542,  541,
      543,  545, 1009,  897,  545,  533,  537,  535,  538,  536,
      998,  537,  541,  996,  539,  540,  545,  538,  544,  542,
     1017,  544,  539,  540,  546, 1016,  547,  546,  543,  547,
     1009,  542,  541,  543,  996,  548,  544,  545,  548,  882,
      549,  882,  546,  549,  547,  550,  551,  552,  550,  551,
      552,  548,  553,  554,  544,  553,  554,  883,  555,  883,
      546,  555,  547,  556,  550,  549,  556, 1015, 1003,  560,
      553,  548,  560,  554,  555, 1003,  549,  551,  552, 1014,
      551,  550,  551,  552,  557,  557,  557,  557,  553,  554,

      884,  902,  884,  557,  555,  558,  558,  558,  558,  556,
      556,  559,  559,  559,  559,  560,  561,  562, 1007,  561,
      562,  563,  564,  560,  563,  564,  565,  902,  914,  565,
      557,  596,  596,  596,  596,  598,  640,  644,  598,  640,
      644,  885,  596,  885,  914, 1004,  598,  559,  690,  887,
      563,  690,  561,  562,  887, 1013, 1007,  563,  564, 1004,
      933,  562,  565,  798,  690,  564,  798,  890,  561,  890,
      887,  565,  603,  603,  603,  603,  605,  605,  605,  605,
      637,  637,  637,  637,  690, 1010, 1072,  598,  640,  644,
      646,  646,  646,  646,  648,  648,  648,  648,  649,  649,

      649,  649,  651,  651,  651,  651, 1006, 1072,  603,  652,
     1008,  652,  652, 1006,  653,  798,  653,  653,  892,  654,
      892,  654,  654, 1010,  691,  652,  655,  691,  655,  655,
      893,  692,  893,  656,  692,  656,  656,  657,  931,  657,
      657, 1120, 1068,  646,  653,  652,  656,  655, 1120, 1008,
      653,  649,  654, 1068,  691,  654,  658,  657,  658,  658,
      691,  930,  655,  659,  692,  659,  659,  692,  660,  656,
      660,  660, 1181,  657,  658,  661,  659,  661,  661,  662,
     1067,  662,  662,  663, 1069,  663,  663,  664,  929,  664,
      664,  699,  658,  665,  699,  665,  665, 1067, 1069,  659,

      660,  661,  696,  662,  660,  696,  666, 1181,  666,  666,
      667,  661,  667,  667,  663,  662,  664,  699, 1070,  663,
      696,  665,  668,  664,  668,  668, 1075,  699,  667,  665,
      666,  669, 1070,  669,  669,  668, 1077,  670,  696,  670,
      670,  895,  666,  895,  669,  671,  667,  671,  671,  672,
      928,  672,  672,  673, 1075,  673,  673,  693,  668,  674,
      693,  674,  674,  675, 1077,  675,  675,  669,  670,  715,
      927,  673,  715,  670,  926,  671,  672,  674,  693, 1074,
     1074,  671,  675,  715,  676,  672,  676,  676,  677,  673,
      677,  677,  925,  693,  678,  674,  678,  678,  679,  675,

      679,  679,  677,  923, 1161,  715,  680,  678,  680,  680,
      681,  679,  681,  681, 1117,  682,  676,  682,  682,  684,
      676,  684,  684,  685,  677,  685,  685,  680, 1117,  994,
      678,  994, 1161,  686,  679,  686,  686,  687,  681,  687,
      687,  688,  680,  688,  688, 1159,  681,  683,  683,  683,
      683,  682, 1159,  920,  689,  684,  689,  689,  694,  685,
      695,  694, 1118,  695,  684,  682,  995,  698,  995,  686,
      698,  694, 1000,  687, 1000,  685, 1118,  688,  697,  688,
      695,  697, 1001,  683, 1001,  686,  700,  687,  997,  700,
      689,  697,  701,  997,  694,  701,  695,  702,  918,  698,

      702,  703,  705,  698,  703,  705,  689, 1188,  704,  997,
      700,  704,  706,  917,  697,  706,  708,  916,  707,  708,
      705,  707,  700,  701, 1192,  706,  702,  709,  701,  703,
      709,  707,  704,  702, 1002,  915, 1002,  703,  705,  710,
      711,  907,  710,  711,  704, 1188,  712,  708,  706,  712,
      713,  905,  708,  713,  707, 1192,  714,  709,  711,  714,
     1005,  903, 1005,  709,  712,  716,  710,  717,  716,  713,
      717, 1066,  800, 1066,  718,  710,  711,  718,  716,  799,
      717,  719,  712, 1071,  719, 1071,  713,  720,  714,  797,
      720,  722,  714,  796,  722,  718,  721,  721,  721,  721,

      794,  716,  723,  717,  724,  723,  793,  724,  725,  719,
      718,  725,  726,  727,  792,  726,  727,  719,  762,  842,
      791,  762,  842,  720, 1073,  788, 1073,  722,  801,  762,
      801,  801,  721, 1119,  787, 1119,  722,  720,  723,  802,
      724,  802,  802, 1121,  725, 1121,  801,  786,  726,  727,
      726, 1158,  802, 1158,  723,  842,  724,  803,  725,  803,
      803, 1160,  785, 1160,  801,  727,  804,  784,  804,  804,
      762,  805,  783,  805,  805,  802,  782,  781,  806,  804,
      806,  806,  807,  778,  807,  807,  808,  803,  808,  808,
     1180,  776, 1180,  803, 1196,  807, 1196,  775,  809,  806,

      809,  809,  804,  810,  774,  810,  810,  805,  773,  772,
      811,  809,  811,  811,  806,  771,  810,  812,  807,  812,
      812,  769,  808,  811,  813,  838,  813,  813,  838,  814,
      812,  814,  814,  816,  809,  816,  816,  813,  815,  810,
      815,  815,  817,  838,  817,  817,  811,  818,  845,  818,
      818,  845,  768,  812,  815,  819,  766,  819,  819,  814,
      813,  838,  765,  816,  820,  814,  820,  820,  764,  816,
      815,  763,  645,  821,  815,  821,  821,  820,  817,  822,
      643,  822,  822,  818,  845,  642,  823,  819,  823,  823,
      641,  819,  822,  824,  639,  824,  824,  636,  635,  823,

      820,  825,  634,  825,  825,  821,  633,  632,  826,  821,
      826,  826,  631,  630,  825,  822,  629,  827,  824,  827,
      827,  828,  823,  828,  828,  628,  627,  626,  829,  824,
      829,  829,  830,  625,  830,  830,  831,  825,  831,  831,
      832,  826,  832,  832,  826,  624,  833,  840,  833,  833,
      840,  623,  834,  827,  834,  834,  622,  828,  830,  835,
      829,  835,  835,  836,  829,  836,  836,  837,  830,  837,
      837,  839,  831,  621,  839,  620,  832,  840,  619,  618,
      831,  832,  833,  840,  839,  617,  616,  615,  834,  841,
      834,  843,  841,  614,  843,  835,  835,  844,  846,  836,

      844,  846,  841,  837,  613,  847,  612,  839,  847,  611,
      844,  846,  843,  848,  610,  836,  848,  849,  847,  837,
      849,  851,  609,  608,  851,  841,  848,  843,  852,  850,
      849,  852,  850,  844,  846,  854,  853,  855,  854,  853,
      855,  847,  850,  856,  852,  857,  856,  607,  857,  848,
      606,  851,  858,  849,  473,  858,  859,  851,  857,  859,
      852,  472,  471,  470,  852,  850,  853,  860,  469,  859,
      860,  854,  853,  855,  861,  856,  467,  861,  465,  856,
      860,  857,  862,  863,  858,  862,  863,  864,  858,  464,
      864,  865,  859,  866,  865,  862,  866,  868,  867,  861,

      868,  867,  869,  860,  870,  869,  871,  870,  463,  871,
      861,  872,  462,  461,  872,  459,  863,  873,  862,  863,
      873,  458,  457,  864,  867,  866,  456,  865,  874,  866,
      455,  874,  964,  868,  867,  964, 1027,  454,  869, 1027,
      870,  868,  871,  869,  871,  964,  453,  872,  872,  934,
      452,  934,  934,  873,  935,  451,  935,  935,  936,  450,
      936,  936,  934,  937,  874,  937,  937,  449,  964,  873,
      938,  936,  938,  938,  939,  448,  939,  939,  447,  940,
      874,  940,  940,  446,  941,  934,  941,  941, 1027,  942,
      935,  942,  942,  943,  936,  943,  943,  445,  944,  937,

      944,  944,  938,  444,  443,  945,  938,  945,  945,  442,
      939,  946,  441,  946,  946,  940,  947,  440,  947,  947,
      941,  945,  439,  438,  950,  942,  950,  950,  437,  943,
      948,  436,  948,  948,  944,  435,  384,  945,  947,  946,
      259,  945,  949,  948,  949,  949,  951,  946,  951,  951,
      255,  952,  947,  952,  952,  949,  252,  251,  249,  951,
      950,  953,  248,  953,  953,  954,  948,  954,  954,  955,
      246,  955,  955,  956,  241,  956,  956,  957,  949,  957,
      957,  965,  951,  954,  965,  237,  958,  952,  958,  958,
      957,  959,  967,  959,  959,  967,  969,  953,  956,  969,

      960,  954,  960,  960,  958,  955,  236,  234,  961,  956,
      961,  961,  962,  957,  962,  962,  963,  965,  963,  963,
      966,  968,  958,  966,  968,  233,  970,  959,  967,  970,
      232,  971,  969,  966,  971,  972,  960,  231,  972,  973,
      959,  228,  973,  974,  961,  226,  974,  961,  962,  225,
      960,  977,  963,  968,  977,  976,  966,  968,  976,  224,
      975,  962,  970,  975,  220,  978,  218,  971,  978,  979,
      217,  972,  979,  977,  980,  973,  975,  980,  978,  974,
      216,  981,  979,  976,  981,  982,  983,  977,  982,  983,
      984,  976,  975,  984,  981,  985,  975,  215,  985,  986,

      987,  978,  986,  987,  989,  979,  214,  989,  984,  988,
      980,  990,  988,  987,  990,  991,  992,  981,  991,  992,
      993,  982,  983,  993,  986,  213,  984,  988,  211,  210,
     1030,  985, 1030, 1030,  209,  986,  987,  208,  207, 1031,
      989, 1031, 1031,  206,  205,  988, 1032,  990, 1032, 1032,
      203,  991,  992,  989,  991, 1033,  993, 1033, 1033, 1032,
     1035,  990, 1035, 1035,  202,  992, 1030, 1034,  201, 1034,
     1034,  200,  199,  197, 1036, 1031, 1036, 1036, 1037,  196,
     1037, 1037, 1032, 1033, 1038, 1035, 1038, 1038,  195, 1034,
     1039, 1033, 1039, 1039,  193, 1040, 1035, 1040, 1040, 1036,

      192,  190, 1041, 1034, 1041, 1041,  188,  156, 1040, 1042,
     1036, 1042, 1042, 1048, 1037, 1043, 1048, 1043, 1043, 1044,
     1038, 1044, 1044,   74, 1049,   71, 1039, 1049, 1043, 1044,
     1045, 1040, 1045, 1045, 1041,   69,   67, 1046, 1041, 1046,
     1046, 1047,   65, 1047, 1047, 1042,   62,   57,   54, 1048,
     1050, 1043,   51, 1050, 1051, 1044, 1052, 1051, 1053, 1052,
     1049, 1053, 1054, 1050, 1055, 1054, 1045, 1055, 1056, 1045,
       50, 1056, 1057, 1046,   49, 1057, 1060, 1047, 1052, 1060,
     1047, 1059, 1051, 1053, 1059,   44, 1050, 1054, 1058, 1046,
     1051, 1058, 1052, 1061, 1053,   43, 1061,   40, 1054, 1062,

     1055, 1058, 1062,   39, 1056,   38, 1061, 1063, 1057, 1062,
     1063, 1064, 1060, 1059, 1064, 1065, 1076, 1059, 1065, 1076,
     1087,   33, 1088, 1087, 1058, 1088,   31, 1076, 1090, 1061,
     1091, 1090, 1091, 1091, 1092, 1062, 1092, 1092,   27, 1093,
       23, 1093, 1093, 1063,   21,   17, 1063, 1064,    0,    0,
     1096, 1065, 1096, 1096, 1065,    0,    0,    0, 1094, 1092,
     1094, 1094,    0, 1064, 1093,    0, 1091,    0, 1076,    0,
     1092, 1094, 1087,    0, 1088, 1093,    0,    0,    0, 1095,
     1090, 1095, 1095,    0,    0, 1097, 1096, 1097, 1097, 1098,
        0, 1098, 1098, 1099, 1094, 1099, 1099, 1095, 1097, 1100,

        0, 1100, 1100, 1101,    0, 1101, 1101, 1102,    0, 1102,
     1102, 1103,    0, 1103, 1103, 1095, 1104, 1105,    0, 1104,
     1105, 1097,    0,    0, 1106, 1098,    0, 1106,    0, 1099,
        0, 1099,    0, 1107, 1109, 1100, 1107, 1109, 1108, 1101,
        0, 1108, 1105, 1102,    0, 1110, 1107, 1103, 1110, 1106,
        0, 1100, 1104, 1105, 1111, 1101, 1108, 1111, 1110, 1102,
     1106, 1112, 1113, 1103, 1112, 1113,    0,    0, 1114, 1107,
     1109, 1114, 1115, 1116, 1108, 1115, 1116, 1123,    0,    0,
     1123, 1110, 1124, 1131, 1134, 1124, 1131, 1134, 1123,    0,
     1111,    0, 1136, 1124, 1136, 1136,    0, 1112, 1113, 1112,

        0,    0,    0,    0, 1114, 1136,    0,    0, 1115, 1116,
        0,    0,    0, 1137, 1113, 1137, 1137,    0,    0, 1138,
     1114, 1138, 1138, 1148, 1115, 1116, 1148,    0, 1136, 1123,
     1139, 1137, 1139, 1139, 1124, 1131, 1134, 1140,    0, 1140,
     1140, 1148, 1141, 1139, 1141, 1141,    0,    0, 1142, 1137,
     1142, 1142,    0,    0, 1143, 1138, 1143, 1143, 1144, 1148,
     1144, 1144, 1145,    0, 1145, 1145, 1139, 1146, 1149, 1146,
     1146, 1149, 1147, 1140, 1150, 1147, 1151, 1150, 1141, 1151,
     1153, 1141,    0, 1153, 1142, 1147, 1152, 1150, 1154, 1152,
     1143, 1154, 1155, 1156, 1144, 1155, 1156,    0, 1145, 1157,

     1142,    0, 1157, 1146, 1149,    0, 1143,    0, 1147,    0,
     1150,    0, 1151,    0, 1145,    0, 1153,    0, 1168, 1146,
     1168, 1168, 1152, 1174, 1154, 1152, 1174,    0, 1155, 1156,
        0, 1169, 1153, 1169, 1169, 1157, 1170,    0, 1170, 1170,
     1154,    0,    0,    0, 1169, 1156, 1171,    0, 1171, 1171,
     1172, 1157, 1172, 1172, 1168, 1173,    0, 1173, 1173, 1174,
     1175, 1176, 1177, 1175, 1176, 1177, 1178, 1169, 1179, 1178,
        0, 1179, 1170, 1175, 1184,    0, 1184, 1184, 1185,    0,
     1185, 1185, 1171,    0, 1186, 1187, 1172, 1186, 1187,    0,
     1191, 1173, 1171, 1191,    0,    0, 1175, 1176, 1177,    0,

        0,    0, 1178, 1190, 1179, 1190, 1190,    0, 1177,    0,
     1184,    0,    0,    0, 1185, 1194, 1195, 1194, 1194, 1195,
     1186, 1187, 1198,    0, 1198, 1198, 1191, 1185, 1194, 1195,
     1199,    0, 1191, 1199, 1187,    0,    0,    0,    0, 1190,
        0,    0,    0,    0,    0, 1190,    0,    0,    0,    0,
        0, 1194, 1195,    0,    0,    0,    0,    0, 1198,    0,
        0,    0,    0,    0,    0,    0, 1199, 1201, 1201, 1201,
     1201, 1201, 1201, 1202, 1202, 1202, 1202, 1202, 1202, 1203,
     1203, 1203, 1203, 1203, 1203, 1204, 1204, 1204, 1204, 1204,
     1204, 1205, 1205, 1205, 1205, 1205, 1205, 1206, 1206,    0,

        0, 1206, 1206, 1207, 1207,    0, 1207, 1207, 1207, 1208,
     1208, 1208, 1208, 1208, 1208, 1209,    0,    0,    0, 1209,
     1209, 1210, 1210, 1210, 1210, 1210, 1210, 1211, 1211,    0,
        0, 1211, 1211, 1212, 1212, 1212, 1212, 1212, 1212, 1213,
     1213,    0, 1213, 1213, 1213, 1214, 1214,    0, 1214, 1214,
     1214, 1215, 1215,    0, 1215, 1215, 1215, 1216, 1216,    0,
        0,    0, 1216, 1217, 1217,    0,    0, 1217, 1217, 1218,
     1218,    0, 1218, 1218, 1218, 1220, 1220,    0,    0,    0,
     1220, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[87] =
    {   0,
0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 
    0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "levcomp.lpp"
#line 2 "levcomp.lpp"

// levcomp.lpp:
//      Level compiler lexer for Dungeon Crawl Stone Soup.
//
// Based loosely on NetHack's lev_comp.l

#include "AppHdr.h"
#include <algorithm>
#include <cstring>
#include <queue>
#include "end.h"
#include "mapdef.h"
#include "levcomp.tab.h"

static bool alloced = false;

static queue<const char *> free_queue;

static void flush_free_queue(unsigned int max_allowed)
{
    while (free_queue.size() > max_allowed)
    {
        const char *s = free_queue.front();
        free((void *) s);
        free_queue.pop();
    }
}

static void add_to_queue(const char *s)
{
    free_queue.push(s);
    flush_free_queue(100);
}

static void clean()
{
    if (yylval.text && alloced)
        add_to_queue(yylval.text);
    yylval.text = nullptr;
    alloced = false;
}

// Enter a new state, first clearing yylval of junk.
#define CBEGIN(x) do { BEGIN(x); clean(); } while (0)

static void post_proc_text(char *text, bool trim_right,
                           int strip_trailing, int strip_leading)
{
    char *s = nullptr;
    if (trim_right)
    {
        s = text + strlen(text) - 1;
        while (s >= text && isspace(*s))
            *s-- = 0;
    }
    if (strip_trailing)
    {
        if (!s)
            s = text + strlen(text) - 1;
        while (s >= text && --strip_trailing >= 0)
            *s-- = 0;
    }
    if (strip_leading)
    {
        const int original_length = strlen(text);
        if (original_length > strip_leading)
            memmove(text, text + strip_leading,
                    original_length - strip_leading);
        if (original_length >= strip_leading)
            text[original_length - strip_leading] = 0;
    }
}

static char *copy_text(bool trim_right, int strip_trailing, int strip_leading)
{
    char *newstring = nullptr;
    if ((yylval.text = newstring = strdup(yytext)))
    {
        alloced = true;
        post_proc_text(newstring, trim_right, strip_trailing, strip_leading);
    }
    return (newstring);
}

static void settext(bool trim_right = false,
                    int strip_trailing = 0,
                    int strip_leading = 0)
{
    clean();
    char *newstring = copy_text(trim_right, strip_trailing, strip_leading);
    yylval.text = newstring;
}

static void str_check()
{
    if (!yylval.text)
    {
        char *buf = (char *) malloc(1);
        if (buf)
        {
            yylval.text = buf;
            *buf = 0;
            alloced = true;
        }
    }
}

static void cattext(bool trim_right = false, int strip_trailing = 0)
{
    if (!yylval.text)
        settext(trim_right, strip_trailing);
    else
    {
        bool was_alloced = alloced;
        char *newbuf = (char*) malloc(strlen(yylval.text) + strlen(yytext) + 1);
        if (!newbuf)
            end(1, false, "Out of memory");
        alloced = true;
        strcpy(newbuf, yylval.text);
        strcat(newbuf, yytext);
        post_proc_text(newbuf, trim_right, strip_trailing, 0);
        if (was_alloced)
            free((void*) yylval.text);
        yylval.text = newbuf;
    }
}








#line 1918 "levcomp.lex.cc"

#define INITIAL 0
#define MAPDEF 1
#define LUA 2
#define LUA_ONELINER 3
#define ARGUMENT 4
#define MNAME 5
#define KEYWORDS 6
#define ITEM_LIST 7

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
#line 145 "levcomp.lpp"


#line 2113 "levcomp.lex.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1201 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1200 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 147 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 149 "levcomp.lpp"
{
                        settext(true);
                        return MAP_LINE;
                    }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 154 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 155 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 156 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 158 "levcomp.lpp"
;
	YY_BREAK
case 7:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 160 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 161 "levcomp.lpp"
{
                            settext(true, 2);
                            BEGIN(INITIAL);
                            return LUA_LINE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 166 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 170 "levcomp.lpp"
;
	YY_BREAK
case 11:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "levcomp.lpp"
{
                            settext(true);
                            return LUA_LINE;
                        }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 176 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "levcomp.lpp"
{
                        settext();
                        return STRING;
                    }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 183 "levcomp.lpp"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 184 "levcomp.lpp"
;
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 185 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 187 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 191 "levcomp.lpp"
;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 193 "levcomp.lpp"
{
                        cattext();
                        return ITEM_INFO;
                    }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 198 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 199 "levcomp.lpp"
;
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 200 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 202 "levcomp.lpp"
{ BEGIN(INITIAL); }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 204 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
#line 208 "levcomp.lpp"
;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 210 "levcomp.lpp"
{
                        cattext();
                        return MONSTER_NAME;
                    }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 215 "levcomp.lpp"
{ clean(); return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 216 "levcomp.lpp"
;
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 218 "levcomp.lpp"
{
                        cattext(true, 1);
                    }
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 222 "levcomp.lpp"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 224 "levcomp.lpp"
{
                        cattext();
                    }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 228 "levcomp.lpp"
cattext();
	YY_BREAK
case 33:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 230 "levcomp.lpp"
{ BEGIN(INITIAL); str_check(); return STRING; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 232 "levcomp.lpp"
;
	YY_BREAK
case 35:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 234 "levcomp.lpp"
{ BEGIN(MAPDEF); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 236 "levcomp.lpp"
{ BEGIN(LUA_ONELINER); return MAIN; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 238 "levcomp.lpp"
{ BEGIN(LUA); return PRELUDE; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 239 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 240 "levcomp.lpp"
{ BEGIN(LUA); return MAIN; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 241 "levcomp.lpp"
{ BEGIN(LUA); return VALIDATE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 242 "levcomp.lpp"
{ BEGIN(LUA); return VETO; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 243 "levcomp.lpp"
{ BEGIN(LUA); return EPILOGUE; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 245 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return NAME; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 246 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEFAULT_DEPTH; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 247 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DESC; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 248 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return DEPTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 249 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return ORIENT; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 250 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return PLACE; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 251 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return WELCOME; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 252 "levcomp.lpp"
return CHANCE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 253 "levcomp.lpp"
return WEIGHT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 254 "levcomp.lpp"
{ CBEGIN(KEYWORDS); return TAGS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 255 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SUBST; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 256 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return NSUBST; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 257 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return COLOUR; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 258 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORCOL; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 259 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKCOL; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 260 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LFLOORTILE; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 261 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return LROCKTILE; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 262 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FTILE; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 263 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return RTILE; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 264 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return TILE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 265 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return FHEIGHT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 266 "levcomp.lpp"
{ CBEGIN(MNAME); return MONS; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 267 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return ITEM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 268 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return MARKER; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 269 "levcomp.lpp"
{ CBEGIN(ITEM_LIST); return SHUFFLE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 270 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return CLEAR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 271 "levcomp.lpp"
{ return ORDER; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 273 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KFEAT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 274 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KITEM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 275 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMONS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 276 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KMASK; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 277 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return KPROP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 278 "levcomp.lpp"
{ CBEGIN(ARGUMENT); return SUBVAULT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 280 "levcomp.lpp"
return COMMA;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 282 "levcomp.lpp"
return COLON;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 284 "levcomp.lpp"
return PERC;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 285 "levcomp.lpp"
return DASH;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 287 "levcomp.lpp"
{
                        clean();
                        yylval.f = strtod(yytext, nullptr);
                        return NUMBER;
                    }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 293 "levcomp.lpp"
{
                        settext(true, 1, 1);
                        return STRING;
                    }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 298 "levcomp.lpp"
;
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 299 "levcomp.lpp"
;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 300 "levcomp.lpp"
;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 301 "levcomp.lpp"
return CHARACTER;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 303 "levcomp.lpp"
ECHO;
	YY_BREAK
#line 2700 "levcomp.lex.cc"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(MAPDEF):
case YY_STATE_EOF(LUA):
case YY_STATE_EOF(LUA_ONELINER):
case YY_STATE_EOF(ARGUMENT):
case YY_STATE_EOF(MNAME):
case YY_STATE_EOF(KEYWORDS):
case YY_STATE_EOF(ITEM_LIST):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1201 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1201 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1200);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');
	if ( YY_CURRENT_BUFFER_LVALUE->yy_at_bol )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 303 "levcomp.lpp"



int yywrap()
{
    clean();
    flush_free_queue(0);
    return 1;
}

