# For players who are prone to leave labyrinths without picking up the
# loot, here is a way to avoid that: put the following snippet in your
# options file (init.txt or .crawlrc) and then macro the '<' key to
#  ===safe_upstairs (do it in-game by pressing '~' or Ctrl-D).

{
function safe_upstairs()
  if you.branch() == "Lab" then
     crawl.formatted_mpr("Really leave this labyrinth?", "prompt")
     local res = crawl.getch()
     if string.lower(string.char(res)) == "y" then
       crawl.sendkeys("<")
     end
  else
     crawl.sendkeys("<")
  end
end
}

######################################################################
# Add the following to your options file to automatically pick up
# armour for non-body armour slots (gloves, boots, etc.), if you don't
# already have an item equipped there.
{
add_autopickup_func(function(it, name)
  if it.is_useless then
    return
  end
  if it.class(true) == "armour" then
    local good_slots = {cloak="Cloak", helmet="Helmet", gloves="Gloves",
                        boots="Boots"}
    st, _ = it.subtype()
    if good_slots[st] ~= nil and items.equipped_at(good_slots[st]) == nil then
      return true
    end
  end
end)
}

######################################################################
# To automatically open the skill menu when starting a new game, add
# the following to your options file.

{
local need_skills_opened = true
function ready()
  if you.turns() == 0 and need_skills_opened then
    need_skills_opened = false
    crawl.sendkeys("m")
  end
end
}

######################################################################
# For mummies who want to channel whenever possible, add this to your
# rcfile and macro . or s to ===channel_or_rest. If you remapped the
# ability menu to a different key, change the "a" to the proper one.
{
function channel_or_rest()
  local mp, mmp = you.mp()
  local key = ""
  if mp < mmp then
    for hotkey, abil in pairs(you.ability_table()) do
      if abil == "Channel Energy" then
        key = hotkey
      end
    end
    if key ~= "" then
      crawl.process_keys("a" .. key)
      return
    end
  end

  crawl.do_commands({"CMD_WAIT"})
end
}
